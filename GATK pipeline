#!/bin/bash
#SBATCH --job-name=Mutect2
#SBATCH --mail-user=tarlagad@iu.edu
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --time=49:00:00
#SBATCH --mem=150G
#SBATCH --partition=general
#SBATCH --account=r01134
#SBATCH --error=mutect.error
#SBATCH --output=mutect.out

module load gatk
module load samtools
module load CreateSomaticPanelOfNormals
module load bcftools
module load java
module load picard

# Complete WES Analysis Pipeline with Absolute Paths
# Usage: ./complete_wes_pipeline.sh

################################################################
# 1. Configuration - SET THESE PATHS BEFORE RUNNING
################################################################

# Base directory (update this to your project directory)
BASE_DIR="/N/u/tarlagad/Quartz/WES_project"

# Reference files
REFERENCE="${BASE_DIR}/reference/hg19.fa"
KNOWN_SITES_DIR="${BASE_DIR}/reference/Known_sites"
DBSNP="${KNOWN_SITES_DIR}/dbsnp_138.b37.vcf.gz"
MILLS="${KNOWN_SITES_DIR}/Mills_and_1000G_gold_standard.indels.b37.vcf.gz"
THOUSANDG="${KNOWN_SITES_DIR}/1000G_phase1.snps.high_confidence.b37.vcf.gz"

# Data directories
BAM_DIR="${BASE_DIR}/aligned_data/sorted_BAM"
OUTPUT_DIR="${BASE_DIR}/results"
PON_DIR="${OUTPUT_DIR}/pon"
LOGS_DIR="${OUTPUT_DIR}/logs"

# Create directories
mkdir -p ${PON_DIR} ${OUTPUT_DIR}/somatic ${OUTPUT_DIR}/germline ${LOGS_DIR}

################################################################
# 2. Sample Information from SraRunTable.csv
################################################################

declare -A NORMAL_SAMPLES=(
    ["P1"]="SRR13990516"
    ["P2"]="SRR13990507"
    ["P4"]="SRR13990502"
    ["P6"]="SRR13990511"
)

declare -A TUMOR_SAMPLES=(
    ["P1"]="SRR13990515 SRR13990508"
    ["P2"]="SRR13990505 SRR13990506"
    ["P3"]="SRR13990503 SRR13990504"
    ["P4"]="SRR13990501 SRR13990514"
    ["P5"]="SRR13990512 SRR13990513"
    ["P6"]="SRR13990509 SRR13990510"
)

################################################################
# 3. Base Quality Score Recalibration (BQSR)
################################################################

echo "Running Base Quality Score Recalibration..."

process_sample() {
    local bam=$1
    local base=$(basename ${bam} _sorted.bam)
    
    # Skip if already processed
    if [ -f "${BAM_DIR}/${base}_recal.bam" ]; then
        echo "BAM already processed: ${base}"
        return
    fi

    echo "Processing ${base}..."

    # Mark duplicates
    gatk MarkDuplicates \
        -I ${bam} \
        -O ${BAM_DIR}/${base}_dedup.bam \
        -M ${BAM_DIR}/${base}_metrics.txt \
        --CREATE_INDEX true \
        > ${LOGS_DIR}/${base}_markdup.log 2>&1

    # BaseRecalibrator
    gatk BaseRecalibrator \
        -R ${REFERENCE} \
        -I ${BAM_DIR}/${base}_dedup.bam \
        --known-sites ${DBSNP} \
        --known-sites ${MILLS} \
        --known-sites ${THOUSANDG} \
        -O ${OUTPUT_DIR}/${base}_recal_data.table \
        > ${LOGS_DIR}/${base}_bqsr.log 2>&1

    # ApplyBQSR
    gatk ApplyBQSR \
        -R ${REFERENCE} \
        -I ${BAM_DIR}/${base}_dedup.bam \
        -bqsr ${OUTPUT_DIR}/${base}_recal_data.table \
        -O ${BAM_DIR}/${base}_recal.bam \
        > ${LOGS_DIR}/${base}_apply_bqsr.log 2>&1
}

# Process all BAM files in parallel (adjust -j for your system)
find ${BAM_DIR} -name "*_sorted.bam" | parallel -j 4 process_sample

################################################################
# 4. Create Panel of Normals (PON)
################################################################

echo "Creating Panel of Normals..."

# Collect normal samples
NORMAL_BAMS=""
for normal in "${NORMAL_SAMPLES[@]}"; do
    NORMAL_BAMS+="-I ${BAM_DIR}/${normal}_dedup_recal.bam "
done

# Create PON if it doesn't exist
if [ ! -f "${PON_DIR}/pon.vcf.gz" ]; then
    gatk CreateSomaticPanelOfNormals \
        ${NORMAL_BAMS} \
        -R ${REFERENCE} \
        -O ${PON_DIR}/pon.vcf.gz \
        > ${LOGS_DIR}/pon_creation.log 2>&1
else
    echo "PON already exists at ${PON_DIR}/pon.vcf.gz"
fi

################################################################
# 5. Somatic Variant Calling
################################################################

echo "Calling somatic variants..."

call_somatic() {
    local patient=$1
    local tumor=$2
    local normal=${NORMAL_SAMPLES[$patient]}
    local sample_id="${patient}_${tumor:8:2}"
    
    echo "Processing ${sample_id} (Tumor: ${tumor}, Normal: ${normal})"

    # With matched normal if available
    if [ -n "${normal}" ] && [ -f "${BAM_DIR}/${normal}_dedup_recal.bam" ]; then
        gatk Mutect2 \
            -R ${REFERENCE} \
            -I ${BAM_DIR}/${tumor}_dedup_recal.bam \
            -tumor ${tumor} \
            -I ${BAM_DIR}/${normal}_dedup_recal.bam \
            -normal ${normal} \
            --germline-resource ${DBSNP} \
            --panel-of-normals ${PON_DIR}/pon.vcf.gz \
            -O ${OUTPUT_DIR}/somatic/${sample_id}.vcf.gz \
            > ${LOGS_DIR}/${sample_id}_mutect.log 2>&1
    else
        # Without matched normal (use PON only)
        gatk Mutect2 \
            -R ${REFERENCE} \
            -I ${BAM_DIR}/${tumor}_dedup_recal.bam \
            -tumor ${tumor} \
            --germline-resource ${DBSNP} \
            --panel-of-normals ${PON_DIR}/pon.vcf.gz \
            -O ${OUTPUT_DIR}/somatic/${sample_id}.vcf.gz \
            > ${LOGS_DIR}/${sample_id}_mutect.log 2>&1
    fi

    # Filter variants
    gatk FilterMutectCalls \
        -R ${REFERENCE} \
        -V ${OUTPUT_DIR}/somatic/${sample_id}.vcf.gz \
        -O ${OUTPUT_DIR}/somatic/${sample_id}_filtered.vcf.gz \
        > ${LOGS_DIR}/${sample_id}_filter.log 2>&1
}

# Process all tumor samples
for patient in "${!TUMOR_SAMPLES[@]}"; do
    for tumor in ${TUMOR_SAMPLES[$patient]}; do
        call_somatic ${patient} ${tumor}
    done
done

################################################################
# 6. Germline Variant Calling (for normals)
################################################################

echo "Calling germline variants..."

for patient in "${!NORMAL_SAMPLES[@]}"; do
    normal=${NORMAL_SAMPLES[$patient]}
    sample_id="${patient}_N${normal:8:2}"
    
    echo "Processing germline variants for ${sample_id}"

    gatk HaplotypeCaller \
        -R ${REFERENCE} \
        -I ${BAM_DIR}/${normal}_dedup_recal.bam \
        -O ${OUTPUT_DIR}/germline/${sample_id}.vcf.gz \
        -D ${DBSNP} \
        > ${LOGS_DIR}/${sample_id}_haplotype.log 2>&1

    # Variant Quality Score Recalibration (VQSR)
    gatk VariantRecalibrator \
        -R ${REFERENCE} \
        -V ${OUTPUT_DIR}/germline/${sample_id}.vcf.gz \
        --resource:hapmap,known=false,training=true,truth=true,prior=15.0 ${KNOWN_SITES_DIR}/hapmap_3.3.b37.vcf.gz \
        --resource:1000G,known=false,training=true,truth=false,prior=10.0 ${THOUSANDG} \
        --resource:dbsnp,known=true,training=false,truth=false,prior=2.0 ${DBSNP} \
        -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
        -mode SNP \
        -O ${OUTPUT_DIR}/germline/${sample_id}_snp.recal \
        --tranches-file ${OUTPUT_DIR}/germline/${sample_id}_snp.tranches \
        > ${LOGS_DIR}/${sample_id}_recal_snp.log 2>&1

    gatk ApplyVQSR \
        -R ${REFERENCE} \
        -V ${OUTPUT_DIR}/germline/${sample_id}.vcf.gz \
        -O ${OUTPUT_DIR}/germline/${sample_id}_filtered.vcf.gz \
        --truth-sensitivity-filter-level 99.0 \
        --tranches-file ${OUTPUT_DIR}/germline/${sample_id}_snp.tranches \
        --recal-file ${OUTPUT_DIR}/germline/${sample_id}_snp.recal \
        -mode SNP \
        > ${LOGS_DIR}/${sample_id}_apply_vqsr.log 2>&1
done

################################################################
# 7. Variant Annotation
################################################################

echo "Annotating variants..."

for vcf in ${OUTPUT_DIR}/somatic/*_filtered.vcf.gz; do
    base=$(basename ${vcf} _filtered.vcf.gz)
    
    # Basic annotation with dbSNP
    bcftools annotate \
        -a ${DBSNP} \
        -c ID \
        -o ${OUTPUT_DIR}/somatic/${base}_annotated.vcf.gz \
        ${vcf} \
        > ${LOGS_DIR}/${base}_annotation.log 2>&1
    
    # Add more annotations as needed (e.g., ClinVar, COSMIC)
done

echo "Variant calling pipeline completed successfully!"
